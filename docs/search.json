[
  {
    "objectID": "dashdash.html",
    "href": "dashdash.html",
    "title": "",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nimport plotly.express as px\nimport plotly.io as pio\n\npd.options.plotting.backend = \"plotly\"\npio.templates.default = \"plotly_white\"\n\n\nimport json\nimport requests\nimport pickle\n\n\n\ndf = pd.read_csv(\"https://raw.githubusercontent.com/guebin/DV2023/main/posts/NYCTaxi.csv\").assign(\n    log_trip_duration = lambda df: np.log(df.trip_duration),\n    pickup_datetime = lambda df: df.pickup_datetime.apply(pd.to_datetime),\n    dropoff_datetime = lambda df: df.dropoff_datetime.apply(pd.to_datetime),\n    dist = lambda df: np.sqrt((df.pickup_latitude-df.dropoff_latitude)**2 + (df.pickup_longitude-df.dropoff_longitude)**2),\n    #---#\n    vendor_id = lambda df: df.vendor_id.map({1:'A',2:'B'})\n).assign(\n    speed = lambda df: df.dist / df.trip_duration,\n    pickup_hour = lambda df: df.pickup_datetime.dt.hour,\n    dropoff_hour = lambda df: df.dropoff_datetime.dt.hour,\n    dayofweek = lambda df: df.pickup_datetime.dt.dayofweek\n)\ndf_small = df[::100].reset_index(drop=True)\n\n\ntidydata = df.pivot_table(\n    index='pickup_hour',\n    columns='dayofweek',\n    values='speed',\n    aggfunc= 'mean'\n    ).stack().reset_index().rename({0:'speed_mean'},axis=1)\\\n.set_index(['pickup_hour','speed_mean']).apply(lambda x: x.replace({0:'월',1:'화',2:'수',3:'목',4:'금',5:'토',6:'일'})).reset_index()\npx.density_heatmap(\n    data_frame=tidydata,\n    x='pickup_hour',\n    y='dayofweek',\n    z='speed_mean',\n    nbinsx=24,\n    nbinsy=7,\n    height=450\n).update_layout(coloraxis_colorbar=dict(\n    title=\"평균속력\"),xaxis=dict(title='pickup 시간'),yaxis=dict(title='요일'))\n\n                                                \n\n\n\ntidydata = df.pivot_table(\n    index = 'pickup_hour',\n    columns = 'dayofweek',\n    values = 'dist',\n    aggfunc = 'mean'\n).stack().reset_index().rename({0:'dist_mean'},axis=1)\\\n.set_index(['pickup_hour','dist_mean']).apply(lambda x: x.replace({0:'월',1:'화',2:'수',3:'목',4:'금',5:'토',6:'일'})).reset_index()\npx.density_heatmap(\n    data_frame=tidydata,\n    x='pickup_hour',\n    y='dayofweek',\n    z='dist_mean',\n    nbinsx=24,\n    nbinsy=7,\n    height=450\n).update_layout(coloraxis_colorbar=dict(\n    title=\"평균이동거리\"),xaxis=dict(title='pickup 시간'),yaxis=dict(title='요일'))\n\n                                                \n\n\n\n\n\n/root/anaconda3/envs/dv2023/lib/python3.10/site-packages/plotly/express/_core.py:2044: FutureWarning:\n\nThe default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n\n/root/anaconda3/envs/dv2023/lib/python3.10/site-packages/plotly/express/_core.py:2044: FutureWarning:\n\nThe default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n\n\n\n                                                \n\n\n\n\n# 평균속력을 4개의 범주로 나누고 데이터를 속도 순으로 정렬\nsmalldf = df_small.assign(\n    평균속력=pd.qcut(df_small.speed, 4, labels=['매우느림', '조금느림', '조금빠름', '매우빠름'])\n).sort_values('speed', ascending=True)\n\n# 픽업과 드롭오프 관련 열\npcol = ['pickup_datetime', 'pickup_longitude', 'pickup_latitude', 'pickup_hour']\ndcol = ['dropoff_datetime', 'dropoff_longitude', 'dropoff_latitude', 'dropoff_hour']\n\n# 데이터 변환 함수\ndef transform(smalldf):\n    pickup = smalldf.loc[:, ['id'] + pcol].set_axis(['id', 'datetime', 'longitude', 'latitude', 'hour'], axis=1).assign(type='pickup')\n    dropoff = smalldf.loc[:, ['id'] + dcol].set_axis(['id', 'datetime', 'longitude', 'latitude', 'hour'], axis=1).assign(type='dropoff')\n    return pd.concat([pickup, dropoff], axis=0)\n\n# 데이터 변환과 병합\ndf_left = smalldf.drop(pcol + dcol, axis=1)\ndf_right = pd.concat([transform(df) for i, df in smalldf.groupby('id')]).reset_index(drop=True)\nsmalldf2 = df_left.merge(df_right, on='id')\n\n# 시각화 데이터 준비\ntidydata = smalldf2\n\n# 선형 지도 시각화\nfig3 = px.line_mapbox(\n    data_frame=tidydata,\n    lat='latitude',\n    lon='longitude',\n    color='평균속력',\n    line_group='id',\n    mapbox_style='carto-positron',\n    zoom=11\n)\n\n# 범례 이름 변경\nfig3.for_each_trace(lambda t: t.update(name=t.name.replace('매우빠름', '매우빠름 (pickup/dropoff)')))\nfig3.for_each_trace(lambda t: t.update(name=t.name.replace('조금빠름', '조금빠름 (pickup/dropoff)')))\nfig3.for_each_trace(lambda t: t.update(name=t.name.replace('조금느림', '조금느림 (pickup/dropoff)')))\nfig3.for_each_trace(lambda t: t.update(name=t.name.replace('매우느림', '매우느림 (pickup/dropoff)')))\n\n# 산점도 데이터\nscatter_data = px.scatter_mapbox(\n    data_frame=tidydata,\n    lat='latitude',\n    lon='longitude',\n    color='평균속력',\n    size='passenger_count',\n    size_max=10,\n    mapbox_style='carto-positron',\n    zoom=11\n).for_each_trace(lambda t: t.update(name=t.name.replace('매우빠름', '매우빠름(path)')))\\\n.for_each_trace(lambda t: t.update(name=t.name.replace('조금빠름', '조금빠름(path)')))\\\n.for_each_trace(lambda t: t.update(name=t.name.replace('조금느림', '조금느림(path)')))\\\n.for_each_trace(lambda t: t.update(name=t.name.replace('매우느림', '매우느림(path)'))).data\n\n# 산점도 데이터를 선형 지도 시각화에 추가\nfor sd in scatter_data:\n    fig3.add_trace(sd)\n\n# 트레이스 속성 업데이트\nfig3.update_traces(\n    line={'width': 1},\n    opacity=0.8,\n)\n\n# 시각화 표시\nfig3.show()\n\n\n/root/anaconda3/envs/dv2023/lib/python3.10/site-packages/plotly/express/_core.py:2044: FutureWarning:\n\nThe default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n\n/root/anaconda3/envs/dv2023/lib/python3.10/site-packages/plotly/express/_core.py:2044: FutureWarning:\n\nThe default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning."
  },
  {
    "objectID": "dash_test/dashdash.html",
    "href": "dash_test/dashdash.html",
    "title": "",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nimport plotly.express as px\nimport plotly.io as pio\n\npd.options.plotting.backend = \"plotly\"\npio.templates.default = \"plotly_white\"\n\n\nimport json\nimport requests\nimport pickle\n\n\n\ndf = pd.read_csv(\"https://raw.githubusercontent.com/guebin/DV2023/main/posts/NYCTaxi.csv\").assign(\n    log_trip_duration = lambda df: np.log(df.trip_duration),\n    pickup_datetime = lambda df: df.pickup_datetime.apply(pd.to_datetime),\n    dropoff_datetime = lambda df: df.dropoff_datetime.apply(pd.to_datetime),\n    dist = lambda df: np.sqrt((df.pickup_latitude-df.dropoff_latitude)**2 + (df.pickup_longitude-df.dropoff_longitude)**2),\n    #---#\n    vendor_id = lambda df: df.vendor_id.map({1:'A',2:'B'})\n).assign(\n    speed = lambda df: df.dist / df.trip_duration,\n    pickup_hour = lambda df: df.pickup_datetime.dt.hour,\n    dropoff_hour = lambda df: df.dropoff_datetime.dt.hour,\n    dayofweek = lambda df: df.pickup_datetime.dt.dayofweek\n)\ndf_small = df[::100].reset_index(drop=True)\n\n\ntidydata = df.pivot_table(\n    index='pickup_hour',\n    columns='dayofweek',\n    values='speed',\n    aggfunc= 'mean'\n    ).stack().reset_index().rename({0:'speed_mean'},axis=1)\\\n.set_index(['pickup_hour','speed_mean']).apply(lambda x: x.replace({0:'월',1:'화',2:'수',3:'목',4:'금',5:'토',6:'일'})).reset_index()\npx.density_heatmap(\n    data_frame=tidydata,\n    x='pickup_hour',\n    y='dayofweek',\n    z='speed_mean',\n    nbinsx=24,\n    nbinsy=7,\n    height=450\n).update_layout(coloraxis_colorbar=dict(\n    title=\"평균속력\"),xaxis=dict(title='pickup 시간'),yaxis=dict(title='요일'))\n\n                                                \n\n\n\ntidydata = df.pivot_table(\n    index = 'pickup_hour',\n    columns = 'dayofweek',\n    values = 'dist',\n    aggfunc = 'mean'\n).stack().reset_index().rename({0:'dist_mean'},axis=1)\\\n.set_index(['pickup_hour','dist_mean']).apply(lambda x: x.replace({0:'월',1:'화',2:'수',3:'목',4:'금',5:'토',6:'일'})).reset_index()\npx.density_heatmap(\n    data_frame=tidydata,\n    x='pickup_hour',\n    y='dayofweek',\n    z='dist_mean',\n    nbinsx=24,\n    nbinsy=7,\n    height=450\n).update_layout(coloraxis_colorbar=dict(\n    title=\"평균이동거리\"),xaxis=dict(title='pickup 시간'),yaxis=dict(title='요일'))\n\n                                                \n\n\n\ndf = pd.read_csv(\"https://raw.githubusercontent.com/guebin/DV2023/main/posts/NYCTaxi.csv\").assign(\n    log_trip_duration = lambda df: np.log(df.trip_duration),\n    pickup_datetime = lambda df: df.pickup_datetime.apply(pd.to_datetime),\n    dropoff_datetime = lambda df: df.dropoff_datetime.apply(pd.to_datetime),\n    dist = lambda df: np.sqrt((df.pickup_latitude-df.dropoff_latitude)**2 + (df.pickup_longitude-df.dropoff_longitude)**2),\n    #---#\n    vendor_id = lambda df: df.vendor_id.map({1:'A',2:'B'})\n).assign(\n    speed = lambda df: df.dist / df.trip_duration,\n    pickup_hour = lambda df: df.pickup_datetime.dt.hour,\n    dropoff_hour = lambda df: df.dropoff_datetime.dt.hour,\n    dayofweek = lambda df: df.pickup_datetime.dt.dayofweek\n)\ndf_small = df[::100].reset_index(drop=True)\n\n\nsmalldf = df_small.assign(\n    평균속력 = pd.qcut(df_small.speed,4,labels=['매우느림','조금느림','조금빠름','매우빠름'])).sort_values('speed',ascending=True)\n\npcol = ['pickup_datetime', 'pickup_longitude', 'pickup_latitude', 'pickup_hour']\ndcol = ['dropoff_datetime', 'dropoff_longitude', 'dropoff_latitude', 'dropoff_hour']\ndef transform(smalldf):\n    pickup = smalldf.loc[:,['id']+pcol].set_axis(['id', 'datetime', 'longitude', 'latitude', 'hour'],axis=1).assign(type = 'pickup')\n    dropoff = smalldf.loc[:,['id']+dcol].set_axis(['id', 'datetime', 'longitude', 'latitude', 'hour'],axis=1).assign(type = 'dropoff')\n    return pd.concat([pickup,dropoff],axis=0)\ndf_left = smalldf.drop(pcol+dcol,axis=1)\ndf_right = pd.concat([transform(df) for i, df in smalldf.groupby('id')]).reset_index(drop=True)\nsmalldf2 = df_left.merge(df_right)\n\ntidydata = smalldf2\nfig3  = px.line_mapbox(\n    data_frame=tidydata,\n    lat = 'latitude',\n    lon = 'longitude',\n    color = '평균속력',\n    line_group='id',\n    #---#\n    mapbox_style = 'carto-positron',\n    zoom=11,\n).for_each_trace(lambda t: t.update(name=t.name.replace('매우빠름','매우빠름 (pickup/dropoff)')))\\\n.for_each_trace(lambda t: t.update(name=t.name.replace('조금빠름','조금빠름 (pickup/dropoff)')))\\\n.for_each_trace(lambda t: t.update(name=t.name.replace('조금느림','조금느림 (pickup/dropoff)')))\\\n.for_each_trace(lambda t: t.update(name=t.name.replace('매우느림','매우느림 (pickup/dropoff)')))\n\nscatter_data = px.scatter_mapbox(\n    data_frame=tidydata,\n    lat = 'latitude',\n    lon = 'longitude',\n    color = '평균속력',\n    size='passenger_count',\n    size_max=10,\n    #---#\n    mapbox_style = 'carto-positron',\n    zoom=11\n).for_each_trace(lambda t: t.update(name=t.name.replace('매우빠름','매우빠름(path)')))\\\n.for_each_trace(lambda t: t.update(name=t.name.replace('조금빠름','조금빠름(path)')))\\\n.for_each_trace(lambda t: t.update(name=t.name.replace('조금느림','조금느림(path)')))\\\n.for_each_trace(lambda t: t.update(name=t.name.replace('매우느림','매우느림(path)'))).data\nfor sd in scatter_data:\n  fig3.add_trace(sd)\nfig3.update_traces(\n    line={\n        'width':1\n    },\n    opacity=0.8,\n)\n\nfig3.show()\n\n/root/anaconda3/envs/dv2023/lib/python3.10/site-packages/plotly/express/_core.py:2044: FutureWarning:\n\nThe default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n\n/root/anaconda3/envs/dv2023/lib/python3.10/site-packages/plotly/express/_core.py:2044: FutureWarning:\n\nThe default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n\n\n\n                                                \n\n\n\n\n\n/tmp/ipykernel_159/3504119516.py:10: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n/tmp/ipykernel_159/3504119516.py:14: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n/root/anaconda3/envs/dv2023/lib/python3.10/site-packages/plotly/express/_core.py:2044: FutureWarning:\n\nThe default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning."
  }
]